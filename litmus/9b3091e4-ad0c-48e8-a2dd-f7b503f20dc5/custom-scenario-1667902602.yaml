apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  creationTimestamp: null
  labels:
    cluster_id: 9f2d58e8-31ea-4850-9eeb-a34ead754e75
    subject: custom-scenario-1667902602_litmus
    workflow_id: cbae3a5a-7628-4349-9e3f-0a55d3f1e210
    workflows.argoproj.io/controller-instanceid: 9f2d58e8-31ea-4850-9eeb-a34ead754e75
  name: custom-scenario-1667902602
  namespace: litmus
spec:
  arguments:
    parameters:
    - name: adminModeNamespace
      value: litmus
  entrypoint: custom-chaos
  nodeSelector:
    chaos: "true"
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
  serviceAccountName: argo-chaos
  templates:
  - inputs: {}
    metadata: {}
    name: custom-chaos
    outputs: {}
    steps:
    - - arguments: {}
        name: install-chaos-experiments
        template: install-chaos-experiments
    - - arguments: {}
        name: pod-http-reset-peer-s14
        template: pod-http-reset-peer-s14
  - container:
      args:
      - kubectl apply -f /tmp/pod-http-reset-peer-s14.yaml -n {{workflow.parameters.adminModeNamespace}}
        &&  sleep 30
      command:
      - sh
      - -c
      image: litmuschaos/k8s:2.12.0
      name: ""
      resources: {}
    inputs:
      artifacts:
      - name: pod-http-reset-peer-s14
        path: /tmp/pod-http-reset-peer-s14.yaml
        raw:
          data: |
            apiVersion: litmuschaos.io/v1alpha1
            description:
              message: >
                it injects chaos into the pod which stops outgoing http requests by
                resetting the TCP connection and then reverts back to the original state
                after a specified duration
            kind: ChaosExperiment
            metadata:
              name: pod-http-reset-peer
              labels:
                name: pod-http-reset-peer
                app.kubernetes.io/part-of: litmus
                app.kubernetes.io/component: chaosexperiment
                app.kubernetes.io/version: 2.12.0
            spec:
              definition:
                scope: Namespaced
                permissions:
                  - apiGroups:
                      - ""
                    resources:
                      - pods
                    verbs:
                      - create
                      - delete
                      - get
                      - list
                      - patch
                      - update
                      - deletecollection
                  - apiGroups:
                      - ""
                    resources:
                      - events
                    verbs:
                      - create
                      - get
                      - list
                      - patch
                      - update
                  - apiGroups:
                      - ""
                    resources:
                      - configmaps
                    verbs:
                      - get
                      - list
                  - apiGroups:
                      - ""
                    resources:
                      - pods/log
                    verbs:
                      - get
                      - list
                      - watch
                  - apiGroups:
                      - ""
                    resources:
                      - pods/exec
                    verbs:
                      - get
                      - list
                      - create
                  - apiGroups:
                      - apps
                    resources:
                      - deployments
                      - statefulsets
                      - replicasets
                      - daemonsets
                    verbs:
                      - list
                      - get
                  - apiGroups:
                      - apps.openshift.io
                    resources:
                      - deploymentconfigs
                    verbs:
                      - list
                      - get
                  - apiGroups:
                      - ""
                    resources:
                      - replicationcontrollers
                    verbs:
                      - get
                      - list
                  - apiGroups:
                      - argoproj.io
                    resources:
                      - rollouts
                    verbs:
                      - list
                      - get
                  - apiGroups:
                      - batch
                    resources:
                      - jobs
                    verbs:
                      - create
                      - list
                      - get
                      - delete
                      - deletecollection
                  - apiGroups:
                      - litmuschaos.io
                    resources:
                      - chaosengines
                      - chaosexperiments
                      - chaosresults
                    verbs:
                      - create
                      - list
                      - get
                      - patch
                      - update
                      - delete
                image: litmuschaos/go-runner:2.12.0
                imagePullPolicy: Always
                args:
                  - -c
                  - ./experiments -name pod-http-reset-peer
                command:
                  - /bin/bash
                env:
                  - name: TARGET_CONTAINER
                    value: ""
                  - name: LIB_IMAGE
                    value: litmuschaos/go-runner:2.12.0
                  - name: RESET_TIMEOUT
                    value: "0"
                  - name: TARGET_SERVICE_PORT
                    value: "80"
                  - name: PROXY_PORT
                    value: "20000"
                  - name: NETWORK_INTERFACE
                    value: eth0
                  - name: TOTAL_CHAOS_DURATION
                    value: "60"
                  - name: RAMP_TIME
                    value: ""
                  - name: LIB
                    value: litmus
                  - name: PODS_AFFECTED_PERC
                    value: ""
                  - name: TARGET_PODS
                    value: ""
                  - name: CONTAINER_RUNTIME
                    value: docker
                  - name: SOCKET_PATH
                    value: /var/run/docker.sock
                  - name: NODE_LABEL
                    value: ""
                  - name: SEQUENCE
                    value: parallel
                labels:
                  name: pod-http-reset-peer
                  app.kubernetes.io/part-of: litmus
                  app.kubernetes.io/component: experiment-job
                  app.kubernetes.io/version: 2.12.0
    metadata: {}
    name: install-chaos-experiments
    outputs: {}
  - container:
      args:
      - -file=/tmp/chaosengine-pod-http-reset-peer-s14.yaml
      - -saveName=/tmp/engine-name
      image: litmuschaos/litmus-checker:2.12.0
      name: ""
      resources: {}
    inputs:
      artifacts:
      - name: pod-http-reset-peer-s14
        path: /tmp/chaosengine-pod-http-reset-peer-s14.yaml
        raw:
          data: |
            apiVersion: litmuschaos.io/v1alpha1
            kind: ChaosEngine
            metadata:
              namespace: "{{workflow.parameters.adminModeNamespace}}"
              generateName: pod-http-reset-peer-s14
              labels:
                workflow_run_id: "{{workflow.uid}}"
            spec:
              engineState: active
              appinfo:
                appns: k1launch
                applabel: app.kubernetes.io/instance=k1launch
                appkind: deployment
              chaosServiceAccount: litmus-admin
              components:
                runner:
                  nodeSelector: # nodeSelector controls placement of chaos runner (spawned by chaos operator)
                    chaos: "true"
                  tolerations: # tolerations apply to chaos runner (spawned by chaos operator)
                    - key: "chaos"
                      operator: "Equal"
                      value: "true"
                      effect: "NoSchedule"
              experiments:
                - name: pod-http-reset-peer
                  spec:
                    components:
                      nodeSelector:
                        chaos: "true"
                      tolerations:
                        - effect: NoSchedule
                          key: chaos
                          operator: Equal
                          value: "true"
                      env:
                        - name: TOTAL_CHAOS_DURATION
                          value: "300"
                        - name: RESET_TIMEOUT
                          value: "60000"
                        - name: TARGET_SERVICE_PORT
                          value: "8443"
                        - name: TARGET_PODS
                          value: ""
                        - name: CONTAINER_RUNTIME
                          value: containerd
                        - name: SOCKET_PATH
                          value: /var/run/containerd/containerd.sock
                        - name: PODS_AFFECTED_PERC
                          value: "100"
                        - name: TOXICITY
                          value: "100"
                        - name: PROXY_PORT
                          value: "7919"
                    probe: []
    metadata:
      labels:
        weight: "10"
    name: pod-http-reset-peer-s14
    outputs: {}
  tolerations:
  - effect: NoSchedule
    key: chaos
    operator: Equal
    value: "true"
status:
  finishedAt: null
  startedAt: null
